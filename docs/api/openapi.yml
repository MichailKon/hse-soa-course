openapi: 3.0.3
info:
  title: Social Network API
  description: API for social network user management and posts
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server
paths:
  /api/auth/register:
    post:
      summary: Register a new user
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      summary: Authenticate user
      description: Login with username and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/profile:
    get:
      summary: Get user profile
      description: Retrieve authenticated user profile data
      tags:
        - User Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update user profile
      description: Update authenticated user profile data
      tags:
        - User Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: User profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/posts:
    post:
      summary: Create a new post
      description: Create a new post
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: List posts
      description: Get a paginated list of posts
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPostsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/posts/{id}:
    get:
      summary: Get a post
      description: Get a specific post by ID
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update a post
      description: Update an existing post
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePostRequest'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not the post owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a post
      description: Delete an existing post
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: string
      responses:
        '204':
          description: Post deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not the post owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: misha567889
        email:
          type: string
          format: email
          example: myukondrashin_1@edu.hse.ru
        password:
          type: string
          minLength: 6
          maxLength: 72
          example: soa-course-bruh
        first_name:
          type: string
          maxLength: 50
          example: Mikhail
        last_name:
          type: string
          maxLength: 50
          example: Kondrashin
        birth_date:
          type: string
          format: date
          example: 2004-12-11T00:00:00.000Z
        phone_number:
          type: string
          example: '+01234567890'

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: misha567889
        password:
          type: string
          example: soa-course-bruh

    UpdateProfileRequest:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 50
          example: Mikhail
        last_name:
          type: string
          maxLength: 50
          example: Kondrashin
        email:
          type: string
          format: email
          example: myukondrashin_1@edu.hse.ru
        birth_date:
          type: string
          format: date
          example: 2004-12-11T00:00:00.000Z
        phone_number:
          type: string
          example: '+01234567890'

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: misha567889
        email:
          type: string
          format: email
          example: myukondrashin_1@edu.hse.ru
        first_name:
          type: string
          example: Mikhail
        last_name:
          type: string
          example: Kondrashin
        birth_date:
          type: string
          format: date
          example: 2004-12-11T00:00:00.000Z
        phone_number:
          type: string
          example: '+01234567890'
        created_at:
          type: string
          format: datetime
        updated_at:
          type: string
          format: datetime

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        user:
          $ref: '#/components/schemas/User'

    Error:
      type: object
      properties:
        error:
          type: string
          example: Something went wrong

    CreatePostRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Post title
          example: My First Post
        description:
          type: string
          description: Post content
          example: This is my first post on this platform
        is_private:
          type: boolean
          description: Whether the post is private
          default: false
        tags:
          type: array
          items:
            type: string
          example: ["tech", "golang"]

    UpdatePostRequest:
      type: object
      properties:
        title:
          type: string
          description: Post title
          example: Updated Post Title
        description:
          type: string
          description: Post content
          example: Updated post content
        is_private:
          type: boolean
          description: Whether the post is private
          example: true
        tags:
          type: array
          items:
            type: string
          example: ["updated", "tags"]

    Post:
      type: object
      properties:
        id:
          type: integer
          description: Post ID
          example: "1"
        title:
          type: string
          description: Post title
          example: My First Post
        description:
          type: string
          description: Post content
          example: This is my first post on this platform
        creator_id:
          type: string
          description: ID of the user who created the post (should be convertible to int)
          example: "1"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        is_private:
          type: boolean
          description: Whether the post is private
          example: false
        tags:
          type: array
          items:
            type: string
          description: List of tags
          example: ["tech", "golang"]

    ListPostsResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
          description: List of posts
        total_count:
          type: integer
          format: int32
          description: Total number of posts
          example: 100
        total_pages:
          type: integer
          format: int32
          description: Total number of pages
          example: 10
        page:
          type: integer
          format: int32
          description: Current page number
          example: 1
        page_size:
          type: integer
          format: int32
          description: Number of items per page
          example: 10
